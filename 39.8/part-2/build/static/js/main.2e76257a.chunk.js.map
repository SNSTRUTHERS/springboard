{"version":3,"sources":["NewTodoForm.js","Todo.js","TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["NewTodoForm","callCreate","useState","task","setTask","className","onSubmit","event","preventDefault","id","uuid","done","type","value","placeholder","required","onChange","target","Todo","callRemove","callToggleDone","onClick","style","textDecoration","TodoList","todoItems","JSON","parse","localStorage","getItem","todos","setTodos","toggleTodoDone","todoID","map","todo","setItem","stringify","removeTodo","stopPropagation","filter","todoComponents","bind","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yRA8BeA,EA1BK,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WAAiB,EACVC,mBAAS,IADC,mBAC5BC,EAD4B,KACtBC,EADsB,KAWpC,OACI,uBAAMC,UAAU,cAAcC,SAPb,SAACC,GAClBA,EAAMC,iBACNP,EAAW,CAAEE,OAAMM,GAAIC,cAAQC,MAAM,IACrCP,EAAQ,KAIR,UACI,uBACIQ,KAAK,OACLH,GAAG,OACHI,MAAOV,EACPW,YAAY,gBACZC,UAAQ,EACRC,SAhBS,SAACT,GAAD,OAAWH,EAAQG,EAAMU,OAAOJ,UAkB7C,uBAAOR,UAAU,iCAAiCO,KAAK,SAASC,MAAM,SCVnEK,G,MAbF,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,eAAgBX,EAAqB,EAArBA,GAAIN,EAAiB,EAAjBA,KAAMQ,EAAW,EAAXA,KAClD,OACI,qBACIN,UAAU,OACVI,GAAIA,EACJY,QAASD,EAHb,UAKI,wBAAQf,UAAU,0BAA0BgB,QAASF,IACrD,sBAAMG,MAAOX,EAAO,CAAEY,eAAgB,gBAAmB,GAAzD,SAA8DpB,S,iBCuD3DqB,EA5DE,WAEb,IAAIC,EACJ,IACIA,EAAYC,KAAKC,MAAMC,aAAaC,QAAQ,eAAiB,GAC/D,SACEJ,EAAY,GANG,MAUSvB,mBAASuB,GAVlB,mBAUXK,EAVW,KAUJC,EAVI,KAoBbC,EAAiB,SAACC,GACpB,IAAMR,EAAYK,EAAMI,KAAI,SAACC,GAAD,OACvBA,EAAK1B,KAAOwB,EAAUE,EAAvB,YAAC,eAAkCA,GAAnC,IAAyCxB,MAAOwB,EAAKxB,UAGzDiB,aAAaQ,QAAQ,YAAaV,KAAKW,UAAUZ,IACjDM,EAASN,IAIPa,EAAa,SAACL,EAAQ1B,GACxBA,EAAMgC,kBAEN,IAAMd,EAAYK,EAAMU,QAAO,qBAAG/B,KAAgBwB,KAClDL,aAAaQ,QAAQ,YAAaV,KAAKW,UAAUZ,IACjDM,EAASN,IAGPgB,EAAiBX,EAAMI,KAAI,SAACC,GAAD,OAC7B,cAAC,EAAD,CACIhB,WAAYmB,EAAWI,KAAK,EAAMP,EAAK1B,IACvCW,eAAgBY,EAAeU,KAAK,EAAMP,EAAK1B,IAE/CA,GAAI0B,EAAK1B,GACTN,KAAMgC,EAAKhC,KACXQ,KAAMwB,EAAKxB,MAHNwB,EAAK1B,OAOlB,OACI,uBACIJ,UAAU,WADd,UAGI,8CAAgB,4CAAhB,OACA,6BAAKoC,IACL,cAAC,EAAD,CAAaxC,WA1CF,SAACkC,GAChB,IAAMV,EAAS,sBAAQK,GAAR,CAAeK,IAC9BP,aAAaQ,QAAQ,YAAaV,KAAKW,UAAUZ,IACjDM,EAASN,UCfFkB,EAJH,kBACR,cAAC,EAAD,KCSWC,EAZS,SAACC,GACjBA,GAAeA,aAAuBC,UACtC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDpBQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.2e76257a.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport \"./NewTodoForm.css\";\r\n\r\nconst NewTodoForm = ({ callCreate }) => {\r\n    const [ task, setTask ] = useState(\"\");\r\n\r\n    const handleChange = (event) => setTask(event.target.value);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        callCreate({ task, id: uuid(), done: false });\r\n        setTask(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"NewTodoForm\" onSubmit={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                id=\"text\"\r\n                value={task}\r\n                placeholder=\"New TODO Item\"\r\n                required\r\n                onChange={handleChange}\r\n            />\r\n            <input className=\"NewTodoForm-submit todo-button\" type=\"submit\" value=\"\"/>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default NewTodoForm;\r\n","import \"./Todo.css\";\r\n\r\nconst Todo = ({ callRemove, callToggleDone, id, task, done }) => {\r\n    return (\r\n        <li\r\n            className=\"Todo\"\r\n            id={id}\r\n            onClick={callToggleDone}\r\n        >\r\n            <button className=\"Todo-remove todo-button\" onClick={callRemove} />\r\n            <span style={done ? { textDecoration: \"line-through\" } : {}}>{task}</span>\r\n        </li>\r\n    );\r\n};\r\n\r\nexport default Todo;\r\n","import { useState } from \"react\";\r\nimport NewTodoForm from \"./NewTodoForm\";\r\nimport Todo from \"./Todo\";\r\nimport \"./TodoList.css\";\r\n\r\nconst TodoList = () => {\r\n    // list of todo items retrieved from localstorage\r\n    let todoItems;\r\n    try {\r\n        todoItems = JSON.parse(localStorage.getItem(\"todo_list\")) || [];\r\n    } catch {\r\n        todoItems = [];\r\n    }\r\n\r\n    // todo react state\r\n    const [ todos, setTodos ] = useState(todoItems);\r\n\r\n    // create a new todo item\r\n    const createTodo = (todo) => {\r\n        const todoItems = [ ...todos, todo ];\r\n        localStorage.setItem(\"todo_list\", JSON.stringify(todoItems));\r\n        setTodos(todoItems);\r\n    };\r\n\r\n    // toggle an existing todo item's done state\r\n    const toggleTodoDone = (todoID) => {\r\n        const todoItems = todos.map((todo) =>\r\n            (todo.id !== todoID) ? todo : { ...todo, done: !todo.done }\r\n        );\r\n\r\n        localStorage.setItem(\"todo_list\", JSON.stringify(todoItems));\r\n        setTodos(todoItems);\r\n    }\r\n\r\n    // remove an existing todo\r\n    const removeTodo = (todoID, event) => {\r\n        event.stopPropagation();\r\n\r\n        const todoItems = todos.filter(({ id }) => id !== todoID);\r\n        localStorage.setItem(\"todo_list\", JSON.stringify(todoItems));\r\n        setTodos(todoItems);\r\n    };\r\n\r\n    const todoComponents = todos.map((todo) => (\r\n        <Todo\r\n            callRemove={removeTodo.bind(this, todo.id)}\r\n            callToggleDone={toggleTodoDone.bind(this, todo.id)}\r\n            key={todo.id}\r\n            id={todo.id}\r\n            task={todo.task}\r\n            done={todo.done}\r\n        />\r\n    ));\r\n\r\n    return (\r\n        <main\r\n            className=\"TodoList\"\r\n        >\r\n            <h1>To-Do List (<i>React style</i>)</h1>\r\n            <ul>{todoComponents}</ul>\r\n            <NewTodoForm callCreate={createTodo} />\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default TodoList;\r\n","import TodoList from \"./TodoList\";\n\nconst App = () => (\n    <TodoList />\n);\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}