{"version":3,"sources":["back.png","hooks/useFlip.js","PlayingCard.js","hooks/useLocalStorage.js","hooks/useAxios.js","PlayingCardList.js","pokemonList.js","PokemonSelect.js","helpers.js","PokemonCard.js","PokeDex.js","CardTable.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","useFlip","useState","isFacingUp","setIsFacingUp","isUp","PlayingCard","front","back","backOfCard","flipCard","src","alt","onClick","className","useLocalStorage","key","defaultValue","JSON","parse","localStorage","getItem","stringify","state","setState","useEffect","setItem","useAxios","baseURL","undefined","filter","hook","bind","window","elements","setElements","updateElements","a","entrypoint","axios","get","data","console","log","id","uuid","CardTable","image","cards","addCard","map","defaultProps","pokemon","PokemonSelect","add","pokemonList","pokeIdx","setPokeIdx","onChange","evt","target","value","p","idx","values","Math","floor","random","length","PokemonCard","name","stats","stat","PokeDex","sprites","addPokemon","cardData","front_default","back_default","base_stat","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e03aed3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/back.f3a868fd.png\";","import { useState } from \"react\";\r\n\r\n/**\r\n * Hook for toggling between whether this component is facing up or down.\r\n * \r\n * @returns {[\r\n *     boolean,\r\n *     () => void\r\n * ]} Callback function to flip the associated component over.\r\n */\r\nconst useFlip = () => {\r\n    const [isFacingUp, setIsFacingUp] = useState(true);\r\n    return [ isFacingUp, () => setIsFacingUp((isUp) => !isUp) ];\r\n};\r\n\r\nexport default useFlip;\r\n","import React from \"react\";\nimport useFlip from \"./hooks/useFlip\";\nimport backOfCard from \"./back.png\";\nimport \"./PlayingCard.css\"\n\n/* Renders a single playing card. */\nconst PlayingCard = ({ front, back = backOfCard }) => {\n    const [ isFacingUp, flipCard ] = useFlip();\n    \n    return (\n        <img\n            src={isFacingUp ? front : back}\n            alt=\"playing card\"\n            onClick={flipCard}\n            className=\"PlayingCard Card\"\n        />\n    );\n}\n\nexport default PlayingCard;\n","import React, { useEffect, useState } from \"react\";\r\n\r\n/**\r\n * Creates a state variable that synchronizes with localStorage.\r\n * \r\n * @template T Type of value being stored.\r\n * \r\n * @param {string} key          The key to use to store the state in local storage.\r\n * @param {T}      defaultValue The initial value of the state variable.\r\n * \r\n * @returns {[ T, React.Dispatch<T> ]} State variable and set state callback function.\r\n */\r\nconst useLocalStorage = (key, defaultValue) => {\r\n    const [ state, setState ] = useState(() => {\r\n        const value = JSON.parse(localStorage.getItem(key) || JSON.stringify(defaultValue));\r\n        return value;\r\n    });\r\n    useEffect(() => localStorage.setItem(key, JSON.stringify(state)), [ key, state ]);\r\n\r\n    return [ state, setState ];\r\n};\r\n\r\nexport default useLocalStorage;\r\n","import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport { v4 as uuid } from \"uuid\";\r\nimport useLocalStorage from \"./useLocalStorage\";\r\n\r\n/**\r\n * Creates a new array state variable that receives updated contents from a web URL.\r\n * \r\n * @param {string}        baseURL Base URL of the web get request.\r\n * @param {string?}       key     Key to associate with the state variable. Undefined to not save\r\n *                                in localStorage.\r\n * @param {(data) => any} filter  Optional callback for filtering response data when updating\r\n *                                state variable elements.\r\n * \r\n * @returns {[\r\n *     any[],\r\n *     (string?) => PromiseLike<void>\r\n * ]} State variable array & function to call to append new data.                                                \r\n */\r\nconst useAxios = (baseURL, key = undefined, filter = undefined) => {\r\n    const hook = key ? useLocalStorage.bind(window, key) : useState;\r\n    const [ elements, setElements ] = hook([]);\r\n\r\n    const updateElements = async (entrypoint = undefined) => {\r\n        let { data } = await axios.get(`${baseURL}${entrypoint ? `/${entrypoint}` : ''}/`);\r\n        data = filter ? filter(data) : data;\r\n\r\n        console.log(elements, data);\r\n        setElements([...elements, { ...data, id: uuid() }]);\r\n    };\r\n\r\n    return [ elements, updateElements ];\r\n};\r\n\r\nexport default useAxios;\r\n","import React from \"react\";\nimport PlayingCard from \"./PlayingCard\";\nimport useAxios from \"./hooks/useAxios\";\nimport \"./PlayingCardList.css\";\n\n/* Renders a list of playing cards.\n * Can also add a new card at random. */\nconst CardTable = () => {\n    const [ cards, addCard ] = useAxios(\n        \"https://deckofcardsapi.com/api/deck/new/draw/\",\n        \"playing_cards\",\n        ({ cards: [ { image } ] }) => ({ image })\n    );\n\n    return (\n        <div className=\"PlayingCardList\">\n            <h3>Pick a card, any card!</h3>\n            <div>\n                <button onClick={addCard.bind(this, undefined)}>Add a playing card!</button>\n            </div>\n            <div className=\"PlayingCardList-card-area\">\n                {cards.map(({ id, image }) => (\n                    <PlayingCard key={id} front={image} />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nCardTable.defaultProps = {};\n\nexport default CardTable;\n","/* list of common pokemon for the PokemonSelect component. */\nconst pokemon = [\n    \"pikachu\",\n    \"jigglypuff\",\n    \"charizard\",\n    \"gengar\",\n    \"arcanine\",\n    \"bulbasaur\",\n    \"blaziken\",\n    \"umbreon\",\n    \"lucario\",\n    \"gardevoir\",\n    \"eevee\",\n    \"dragonite\",\n    \"absol\",\n    \"typhlosion\",\n    \"ampharos\",\n    \"squirtle\",\n    \"flygon\",\n    \"ninetales\",\n    \"tyranitar\",\n    \"infernape\",\n    \"snorlax\",\n    \"torterra\",\n    \"luxray\",\n    \"scizor\",\n    \"blastoise\",\n    \"mudkip\",\n    \"garchomp\"\n];\n\nexport default pokemon;\n","import React, { useState } from \"react\";\nimport pokemonList from \"./pokemonList\";\nimport { choice } from \"./helpers\";\n\n/* Select element to choose from common pokemon. */\nconst PokemonSelect = ({ add, pokemon = pokemonList }) => {\n    const [pokeIdx, setPokeIdx] = useState(0);\n    const handleChange = evt => {\n        setPokeIdx(evt.target.value);\n    };\n\n    return (\n        <div>\n            <select onChange={handleChange}>\n                {pokemon.map((p, idx) => (\n                    <option key={idx} value={idx}>{p}</option>\n                ))}\n            </select>\n            <button onClick={() => add(pokemon[pokeIdx])}>Catch one!</button>\n            <button onClick={() => add(choice(pokemon))}>I'm feeling lucky</button>\n        </div>\n    );\n}\n\nexport default PokemonSelect;\n","/* Select a random element from values array. */\nfunction choice(values) {\n    const randIdx = Math.floor(Math.random() * values.length);\n    return values[randIdx];\n}\n\nexport { choice };\n","import React from \"react\";\nimport useFlip from \"./hooks/useFlip\";\nimport \"./PokemonCard.css\";\n\n/* Renders a single pokemon card. */\nconst PokemonCard = ({ front, back, name, stats }) => {\n    const [ isFacingUp, flipCard ] = useFlip();\n    \n    return (\n        <div onClick={flipCard} className=\"PokemonCard Card\">\n            {isFacingUp ? (\n                <div className=\"PokemonCard-front\">\n                    <img src={front} alt={`{name} front`} />\n                    <div>\n                        <p className=\"PokemonCard-name\">{name}</p>\n                        <ul className=\"PokemonCard-stats\">\n                        {stats.map(stat => (\n                            <li key={stat.name}>\n                            <em>{stat.name}</em>: {stat.value}\n                            </li>\n                        ))}\n                        </ul>\n                    </div>\n                </div>\n            ) : (\n                <div className=\"PokemonCard-back\">\n                    <img src={back} alt={`{name} back`} />\n                </div>\n            )}\n        </div>\n    );\n}\n\nexport default PokemonCard;\n","import React from \"react\";\nimport PokemonSelect from \"./PokemonSelect\";\nimport PokemonCard from \"./PokemonCard\";\nimport useAxios from \"./hooks/useAxios\";\nimport \"./PokeDex.css\";\n\n/* Renders a list of pokemon cards.\n * Can also add a new card at random,\n * or from a dropdown of available pokemon. */\nconst PokeDex = () => {\n    const [ pokemon, addPokemon ] = useAxios(\n        \"https://pokeapi.co/api/v2/pokemon\",\n        \"pokedex\",\n        ({ front, back, name, stats, sprites }) => ({ front, back, name, stats, sprites })\n    );\n\n    return (\n        <div className=\"PokeDex\">\n            <div className=\"PokeDex-buttons\">\n                <h3>Please select your pokemon:</h3>\n                <PokemonSelect add={addPokemon} />\n            </div>\n            <div className=\"PokeDex-card-area\">\n                {pokemon.map(cardData => (\n                <PokemonCard\n                    key={cardData.id}\n                    front={cardData.sprites.front_default}\n                    back={cardData.sprites.back_default}\n                    name={cardData.name}\n                    stats={cardData.stats.map(stat => ({\n                        value: stat.base_stat,\n                        name: stat.stat.name\n                    }))}\n                />\n                ))}\n            </div>\n        </div>\n    );\n}\n\nexport default PokeDex;\n","import React from \"react\";\nimport PlayingCardList from \"./PlayingCardList\";\nimport PokeDex from \"./PokeDex\";\nimport \"./CardTable.css\";\n\n/* Main component. Renders card lists for\n * playing cards and pokemon. */\nconst CardTable = () => (\n    <div className=\"CardTable\">\n        <header>\n            <h1 className=\"CardTable-heading\">Check out all my cards.</h1>\n        </header>\n        <main>\n            <PlayingCardList />\n            <PokeDex />\n        </main>\n    </div>\n);\n\nexport default CardTable;\n","import React from \"react\";\nimport CardTable from \"./CardTable\";\n\nconst App = () => <CardTable />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still\n                // exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker.register(swUrl).then((registration) => {\n        registration.onupdatefound = () => {\n            const installingWorker = registration.installing;\n            if (installingWorker == null)\n                return;\n            \n            installingWorker.onstatechange = () => {\n                if (installingWorker.state === 'installed') {\n                    if (navigator.serviceWorker.controller) {\n                        // At this point, the updated precached content has been fetched,\n                        // but the previous service worker will still serve the older\n                        // content until all client tabs are closed.\n                        console.log(\n                            'New content is available and will be used when all ' +\n                            'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                        );\n\n                        // Execute callback\n                        if (config && config.onUpdate)\n                            config.onUpdate(registration);\n                    } else {\n                        // At this point, everything has been precached.\n                        // It's the perfect time to display a\n                        // \"Content is cached for offline use.\" message.\n                        console.log('Content is cached for offline use.');\n\n                        // Execute callback\n                        if (config && config.onSuccess)\n                            config.onSuccess(registration);\n                    }\n                }\n            };\n        };\n    }).catch((error) =>\n        console.error('Error during service worker registration:', error)\n    );\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, { headers: { 'Service-Worker': 'script' } }).then((response) => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n            // No service worker found. Probably a different app. Reload the page.\n            navigator.serviceWorker.ready.then((registration) =>\n                registration.unregister().then(() => window.location.reload())\n            );\n        } else {\n            // Service worker found. Proceed as normal.\n            registerValidSW(swUrl, config);\n        }\n    }).catch(() =>\n      console.log('No internet connection found. App is running in offline mode.')\n    );\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) =>\n            registration.unregister()\n        ).catch((error) =>\n            console.error(error.message)\n        );\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}