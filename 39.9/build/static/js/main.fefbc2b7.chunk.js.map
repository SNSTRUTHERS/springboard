{"version":3,"sources":["Card.js","Deck.js","App.js","reportWebVitals.js","index.js"],"names":["Card","image","rotation","className","src","style","transform","alt","BASE_URL","getJSON","input","init","undefined","Promise","resolve","reject","fetch","then","response","json","catch","reason","Deck","useState","deck","setDeck","cards","setCards","drawing","setDrawing","timerRef","useRef","useEffect","a","current","setInterval","deck_id","success","remaining","data","code","Math","random","alert","clearInterval","cardComponents","map","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAMeA,EAJF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACT,qBAAKC,UAAU,OAAOC,IAAKH,EAAOI,MAAO,CAAEC,UAAU,UAAD,OAAYJ,EAAZ,SAA8BK,IAAI,MCCpFC,G,MAAW,uCASXC,EAAU,SAACC,GAAD,IAAQC,EAAR,4DAAeC,EAAf,OAA6B,IAAIC,SAAQ,SAACC,EAASC,GAC/DC,MAAMN,EAAOC,GAAMM,MAAK,SAACC,GAAD,OACpBJ,EAAQI,EAASC,WACnBC,OAAM,SAACC,GAAD,OAAYN,EAAOM,UAmEhBC,EAhEF,WAAO,IAAD,EACWC,mBAAS,MADpB,mBACPC,EADO,KACDC,EADC,OAEaF,mBAAS,IAFtB,mBAEPG,EAFO,KAEAC,EAFA,OAGiBJ,oBAAS,GAH1B,mBAGPK,EAHO,KAGEC,EAHF,KAITC,EAAWC,mBAsCjB,GAnCAC,qBAAU,WAAQ,sBAAC,4BAAAC,EAAA,sEACIxB,EAAQ,GAAD,OAAID,EAAJ,+BADX,OACTgB,EADS,OAEfC,EAAQD,GAFO,0CAAD,KAGT,IAGTQ,qBAAU,WAuBN,OAtBIJ,IAAYE,EAASI,UACrBJ,EAASI,QAAUC,YAAW,sBAAC,4CAAAF,EAAA,6DACnBG,EAAYZ,EAAZY,QADmB,SAGmB3B,EAAQ,GAAD,OAC9CD,EAD8C,YAClC4B,EADkC,mBAH1B,gBAGnBC,EAHmB,EAGnBA,QAASC,EAHU,EAGVA,UAAcC,EAHJ,uCAOvBF,GAAWC,GAAY,EAAD,YACiBC,EAA/Bb,MADc,UACHzB,EADG,EACHA,MAAOuC,EADJ,EACIA,KAE1Bb,EAAS,GAAD,mBACDD,GADC,CAEJ,CAAEzB,QAAOuC,OAAMtC,SAA0B,IAAhBuC,KAAKC,eAGlCb,GAAW,GACXc,MAAM,+BAhBiB,2CAkB5B,MAGA,WACHC,cAAcd,EAASI,SACvBJ,EAASI,QAAU,QAExB,CAAER,EAAOF,EAAMI,EAASC,KAEtBL,EACD,OACI,qBAAKrB,UAAU,OAAf,SACI,8CAKZ,IAAM0C,EAAiBnB,EAAMoB,KAAI,gBAAG7C,EAAH,EAAGA,MAAOuC,EAAV,EAAUA,KAAMtC,EAAhB,EAAgBA,SAAhB,OAC7B,cAAC,EAAD,CAAiBD,MAAOA,EAAOC,SAAUA,GAA9BsC,MAGf,OACI,sBAAKrC,UAAU,OAAf,UACI,wBAAQ4C,QAAS,kBAAMlB,GAAYD,IAAnC,SACIA,EAAU,qBAAuB,uBAErC,8BAAMiB,QCrEHG,G,MANH,kBACR,sBAAM7C,UAAU,MAAhB,SACI,cAAC,EAAD,QCOO8C,EAZS,SAAAC,GAChBA,GAAeA,aAAuBC,UACtC,6BAAqBlC,MAAK,YAAkD,IAA/CmC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QACzDJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDpBO,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5BZ,M","file":"static/js/main.fefbc2b7.chunk.js","sourcesContent":["import \"./Card.css\";\r\n\r\nconst Card = ({ image, rotation }) => (\r\n    <img className=\"Card\" src={image} style={{ transform: `rotate(${rotation}deg)` }} alt=\"\" />\r\n);\r\n\r\nexport default Card;\r\n","import { useEffect, useRef, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./Deck.css\";\r\n\r\nconst BASE_URL = \"https://deckofcardsapi.com/api/deck\";\r\n\r\n/**\r\n * Similar to fetch, but immediately returns JSON via a promise.\r\n * \r\n * @param {RequestInfo} input URL to fetch JSON from.\r\n * @param {RequestInit} init  Additional fetch parameters.\r\n * @returns {Promise} JSON from given URL.\r\n */\r\nconst getJSON = (input, init = undefined) => new Promise((resolve, reject) => {\r\n    fetch(input, init).then((response) =>\r\n        resolve(response.json())\r\n    ).catch((reason) => reject(reason));\r\n});\r\n\r\nconst Deck = () => {\r\n    const [ deck, setDeck ] = useState(null);\r\n    const [ cards, setCards ] = useState([]);\r\n    const [ drawing, setDrawing ] = useState(false);\r\n    const timerRef = useRef();\r\n    \r\n    // onload: new deck from API\r\n    useEffect(() => { (async () => {\r\n        const deck = await getJSON(`${BASE_URL}/new/shuffle/?deck_count=1`);\r\n        setDeck(deck);\r\n    })(); }, []);\r\n\r\n    // draw card every second if actively drawing cards\r\n    useEffect(() => {\r\n        if (drawing && !timerRef.current) {\r\n            timerRef.current = setInterval(async () => {\r\n                const { deck_id } = deck;\r\n\r\n                const { success, remaining, ...data } = await getJSON(\r\n                    `${BASE_URL}/${deck_id}/draw/?count=1`\r\n                );\r\n\r\n                if (success && remaining) {\r\n                    const { cards: [ { image, code } ] } = data;\r\n\r\n                    setCards([\r\n                        ...cards,\r\n                        { image, code, rotation: Math.random() * 360 }\r\n                    ]);\r\n                } else {\r\n                    setDrawing(false);\r\n                    alert(\"ERROR: No cards remaining.\");\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(timerRef.current);\r\n            timerRef.current = null;\r\n        };\r\n    }, [ cards, deck, drawing, setDrawing ]);\r\n\r\n    if (!deck) {\r\n        return (\r\n            <div className=\"Deck\">\r\n                <h1>Loading...</h1>\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    const cardComponents = cards.map(({ image, code, rotation }) =>\r\n        <Card key={code} image={image} rotation={rotation} />\r\n    );\r\n    \r\n    return (\r\n        <div className=\"Deck\">\r\n            <button onClick={() => setDrawing(!drawing)}>{\r\n                drawing ? \"Stop Drawing Cards\" : \"Keep Drawing Cards\"\r\n            }</button>\r\n            <div>{cardComponents}</div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Deck;\r\n","import Deck from \"./Deck\";\nimport './App.css';\n\nconst App = () => (\n    <main className=\"App\">\n        <Deck />\n    </main>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}